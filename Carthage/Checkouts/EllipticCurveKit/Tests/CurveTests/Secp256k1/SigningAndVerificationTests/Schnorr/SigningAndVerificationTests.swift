//
//  SigningAndVerificationTests.swift
//  EllipticCurveKitTests
//
//  Created by Alexander Cyon on 2018-07-12.
//  Copyright Â© 2018 Alexander Cyon. All rights reserved.
//

import XCTest
import BigInt

@testable import EllipticCurveKit

class SignignAndVerificationTests: XCTestCase {

    override func setUp() {
        super.setUp()
        continueAfterFailure = false
    }

    func test10SchnorrVectors() {
        let testVectors = try! JSONDecoder().decode([TestVectorSignature].self, from: vectors.data(using: .default)!)
        testVectors.forEach {
            performTest(vector: $0)
        }
    }

    private func signingAndVerifyingSignaturesTest(privateKey priHex: String, compressedPublicKey: String, uncompressedPublicKey: String? = nil, message: Message, expectedSignature: Signature<Secp256k1>, k: String? = nil) {

        let privateKey = PrivateKey<Secp256k1>(hex: priHex)!
        let keyPair = AnyKeyGenerator<Secp256k1>.restoreKeyPairFrom(privateKey: privateKey)
        let publicKey = keyPair.publicKey
        if let uncompressedPublicKey = uncompressedPublicKey {
            XCTAssertEqual(publicKey.hex.uncompressed, uncompressedPublicKey)
        }
        XCTAssertEqual(publicKey.hex.compressed, compressedPublicKey)

        XCTAssertEqual(message.asHex.uppercased(), message.description.uppercased())

        XCTAssertTrue(Schnorr<Secp256k1>.verify(message, wasSignedBy: expectedSignature, publicKey: publicKey))

        let calculatedSig: Signature<Secp256k1>

        if let k = k {
            calculatedSig = try! Schnorr<Secp256k1>.trySign(message, privateKey: keyPair.privateKey, k: Number(hexString: k)!, publicKey: keyPair.publicKey)
        } else {
            calculatedSig = Schnorr<Secp256k1>.sign(message, using: keyPair, personalizationDRBG: drbgPers)
        }

        XCTAssertEqual(calculatedSig, expectedSignature)
    }

    func performTest(vector: TestVectorSignature) {
        signingAndVerifyingSignaturesTest(privateKey: vector.priv, compressedPublicKey: vector.pub, message: vector.msg, s: vector.s, r: vector.r, k: vector.k)
    }

    private func signingAndVerifyingSignaturesTest(privateKey priHex: String, compressedPublicKey: String, uncompressedPublicKey: String? = nil, message mHex: String, s: String, r: String, k: String) {

        let expectedSignature = Signature<Secp256k1>(r: Number(hexString: r)!, s:  Number(hexString: s)!)!

        signingAndVerifyingSignaturesTest(privateKey: priHex, compressedPublicKey: compressedPublicKey, uncompressedPublicKey: uncompressedPublicKey, message: Message(hex: mHex), expectedSignature: expectedSignature, k: k)
    }

    private func signingAndVerifyingSignaturesTest(privateKey priHex: String, compressedPublicKey: String, rawMsg: String, sig: String) {

        signingAndVerifyingSignaturesTest(privateKey: priHex, compressedPublicKey: compressedPublicKey, message: Message(message: rawMsg), expectedSignature: Signature(hex: sig)!)
    }

    private func signingAndVerifyingSignaturesTest(privateKey priHex: String, compressedPublicKey: String, msgHex: String, sig: String) {

        signingAndVerifyingSignaturesTest(privateKey: priHex, compressedPublicKey: compressedPublicKey, message: Message(hex: msgHex), expectedSignature: Signature(hex: sig)!)
    }
}

let drbgPers: Data = {
    let pers = "Schnorr+SHA256  ".data(using: .default)!
    var returnValue = Data([Byte](repeating: 0x00, count: 32))
    returnValue = returnValue + pers
    if returnValue.count != 48 { fatalError("bad length") }
    return returnValue
}()

struct TestVectorSignature: Codable {
    let msg: String
    let priv: String
    let pub: String
    let k: String
    let r: String
    let s: String
}

/// Test vectors from Zilliqas Javascript SDK: https://github.com/Zilliqa/Zilliqa-JavaScript-Library/blob/999fb305e49cbbf711cf9af8c2836f0486abb354/src/__tests__/schnorr.fixtures.ts
private let vectors = """
[
    {
        "msg":
        "89D68815DDB9E5F8D7FD53B6EC096616A773B9421F6704CED36EF4E484BA0C6C5A4855C71C33A54AC82BE803E5CFD175779FC444B7E6AA9001EEFABEBC0CF99754887C7B0A27AFDDC415F8A02C5AF1EFEA26AD1E5D92B1E2",
        "priv": "EDA7AFB6E3CEC979CC37BA87A09E63CAA864D0202A6BA7DF7966C012B1D92F7E",
        "pub": "024C34E2D3921D05102BF3D4EE806E188395AFD033F39D090A46A369D709797FC3",
        "k": "63C6C74C9FD5F31B5576E47873994BB6C8724FA31EEAB7669DB915EDFDB1A23C",
        "r": "4B31EA76A9E890D533A753BEB0EE9DE1072CA5508B0DA5D45B1AA9487FA491FE",
        "s": "CC92A532CCB5172C1199178E832EA770B4BFA696034471BDC1CE23215276B109",
    },
    {
        "msg":
        "EF9237CE5B615BC08677EE5ABFBD85F73F7F8868CB1B5FBA4C1309F16061AA133821FBE2A758D2BBE6AA040A940D41B7D3B869CEE945150AA4A40E6FF719EEC24B2681CD5CE06B50273436584066046656D5EFED73157591",
        "priv": "C7A5FCF7B927D652231C56CB8F007D2E4A392726620D6604B50F54BC32732A16",
        "pub": "024F39C9B8DC1355E806F5C324A8D80B67FD0B1848A2A78F7C7E9E514ED9C51074",
        "k": "015B931D9C7BF3A7A70E57868BF29712377E74355FC59032CD7547C80E179010",
        "r": "611FAB2F8B1D0E48D2D535CD9A1DFD9F31AB834F8C34C20100FC93CBA61EEF72",
        "s": "371DC25E061CF20F096AA2B1FE552A7C07D8B102B2F7F8865E984BA679CAF4AF",
    },
    {
        "msg":
        "4E0E67D2D03957F0CF6C87834BF328540588360BA7C7C5F88541634FB7BADE5F94FF671D1FEBDCBDA116D2DA779038ED7679896C29198B2657B58C50EA054F644F4129C8BA8D8D544B727633DD40754398046796E038626F",
        "priv": "8608065C1B777CE7655311293995AA091C84C2B16B010985138936A6736EF0F6",
        "pub": "03707675447CB9E50CDF2DDD4B3D0B2A5CFE2DE60AD377509E340E9D0B75F7458B",
        "k": "8695F6766BA6D132E4EB547AFC9B65C0EE5F2AEC1D0F41E695ABCD161EAC9A52",
        "r": "9CFB236E54868BE966A5104051EB9E1BB7F38B5BA30D2AA865E73F1BABE6C283",
        "s": "4A213BC595BE4A6B91BDC2989041EFEACDD5E09EADEE21AEF6110A32C57C3317",
    },
    {
        "msg":
        "D9D5BF144C08E9577ED0D1E5E560875109B340980580473DBC2E689A3BE838E77A0A3348FE960EC9BF81DA36F1868CA5D24788FA4C0C778BF0D12314285495636516CF40861B3D737FD35DBB591C5B5D25916EB1D86176B1",
        "priv": "01310279230B5D9230AFAD6F72FD6AAB3584F0756833910278BCC54FDCFF2B45",
        "pub": "03CB4F22931C82DE38780DEE9DB105CB7175287D65CF754D79165B2E50E4012E28",
        "k": "6DF6E9E4A2CCCE53812CAA61477B93130F123782614BF61867653C966B03D689",
        "r": "01F095B428B01F7243217C87839892E1EA44ABB22D3BC1FADBA774901218C1FD",
        "s": "6A46F23B370EB837CBB8F52B99F4336FE4FE718C50270938B868314D9609D543",
    },
    {
        "msg":
        "1C1784B5484EECDB393F6A0ACA11B91DF0866B500B8DEE501FD7EB9BCE09A17D74124B4605ADFC0777BED9816D8D7E8488544A18D8045CB3283B0A752B881B5F500FADB59010E63D1B664F8BDA2DBF33CB6BE21C8EB3ECA9",
        "priv": "8CEE0A6AEE8FB30A0AE7B6A5BFAFFA52E097E88F5388919F06D407520056503E",
        "pub": "02D9CFD6CD6B4231BD6F1BDC5DAC502B4AF6144A9407FE37764CAB8CFC530566FA",
        "k": "12C31321A6E3D10597C560DF6D4505ACF85E1531A56FC70EC65466BA79BAA7F7",
        "r": "AB561B9544923AA35F200AAF84206C4132E0F95629FD7CB7CBB211B4D88174F7",
        "s": "B65BAA2528FC5F3B195169EB6BFA2BD7B6D28B7B1323647105A7A733C0FEC4CE",
    },
    {
        "msg":
        "B9103262CDB941F77376F5D3DBB7A3D5A387797FC4819A035ECA704CEDB37110ee7f206b0c8805aaebf4963e7c4708ce8d4e092366e71792a8a3b2bbcdee321b3e15380c541ef0930888969f7457afe18588826a419d5831",
        "priv": "042E4F26C128D61B356C1C44DD8688945B9104CC064572137FF0C2238F3D1B26",
        "pub": "02F898D30F7BE156B7AB89F92B5BE536D0BFADFF1343628DA68FAF24BBF8051F60",
        "k": "BC174CD51F7D19FF103CEA62AD9054387EFCBC9665991501C303549BACDF749B",
        "r": "6E4CF5B29AE2F51645CB48FD0240B3D7A40F54FB87CD0CB6A81AE08086F87A9B",
        "s": "E68710FB6721EC077F7C57878CB7A79370CF7B4D056CE755C6761C166C39FB73",
    },
    {
        "msg":
        "3957166441B93515E8F03C95D8E8CE1E1864FAAD68DDFC5932130109390B0F1FE5CA716805F8362E98DCCAADC86ADBED25801A9A9DCFA6264319DDAFE83A89C51F3C6D199D38DE10E660C37BE872C3F2B31660DE8BC95902",
        "priv": "1A0A27DC91FC16956F2C18A9D3024DE4B3CEE9F330D4955E0655741929181DDF",
        "pub": "0299831A1D3ECEDAC359355059D9D8CA3829CE4788B6D52873BE6811EA7926C0CD",
        "k": "CD9F19178563B5EE012E603C0F977E94E1D22A1FA98992177550E453AAEC0257",
        "r": "391FE228C29165EAA4D3062CF96E2AA7C07B4F0F8D720CEC5162A3F16F653679",
        "s": "513E0537B56E5CFCBE2CFB06022A280DE5BC224021B3BB06EF2BC78721903731",
    },
    {
        "msg":
        "0687EF5309D108534F51F8658FB4F080B7CB19EE9AEBD718CC4FA27C8C37DFC1ADA5D133D13ABE03F021E9B1B78CCBD82F7FF2B38C6D48D01E481B2D4FAF7171805FD7F2D39EF4C4F19B9496E81DAB8193B3737E1B27D9C4",
        "priv": "5E986AD51606AE69D9DA413B8FB503878BA607A31D12EA0B98B7930AC23662A7",
        "pub": "031DFE3D937119F0DAC3BD4CD6DBF6E41FEB29C6B5C14EFB8E387AC4C4EFEB4036",
        "k": "82BFDC4F8C897C46286109FA7B1B4ECCB724CE8823A27B01C0E857587587C71E",
        "r": "C200BC1708C1AEAFA624FB89ECB5FC8F92122D829ABB87FC8A14E27084FB7909",
        "s": "48FDDFCD83AF62442380F3FF1E1A8F986196B56F2BE3F797EA991086F95CEDCE",
    },
    {
        "msg":
        "5BFA6CC351E220AE0CE106986D61FF34A11E19FD3650E9B7818FC33A1E0FC02C44557AC8AB50C9B2DEB2F6B5E24C4FDD9F8867BDCE1FF261008E7897970E346207D75E47A158298E5BA2F56246869CC42E362A02731264E6",
        "priv": "EF7AE484F4821E320D4104F5350B8A9B82121329CAF1596D1563B22595738536",
        "pub": "0250E299F2A83E5E88C4B0A80D2CD5D6F4261E0E5B788F800AA332B4CE4CBC6AD0",
        "k": "9B605C81169E65D8CABCC026834109027D07BC35DB4E60C094704CAD41436522",
        "r": "3B5FC26609EC90B2CEC4A7D43BDC700D8BFA1A20E3AAB5C6A7DAFF4C9BB01C3B",
        "s": "655568B30AFA1DFB60009F33DD9CBD8A4A44CC2A4A446FB7E0B2F84AE08828E5",
    },
    {
        "msg":
        "A7F1D92A82C8D8FE434D98558CE2B347171198542F112D0558F56BD68807999248336241F30D23E55F30D1C8ED610C4B0235398184B814A29CB45A672ACAE548E9C5F1B0C4158AE59B4D39F6F7E8A105D3FEEDA5D5F3D9E4",
        "priv": "0755EFB1BDCA8E28FD29CA57774D9DB7B07A65A48EF7F8762E52840D43FDD277",
        "pub": "02076F5B8511A3AD45A4856681AB66C0B8A979F44640036E752231298ED75AD48E",
        "k": "BC59D8D973767EBB04AE5BCDAD61849985E800D148165FAFF3AD93004EFB42D6",
        "r": "76697A7A7BA544C21FB4B7EB64EF9E1C7CEA22C9CB861C9BB565D99C55767B82",
        "s": "53354ADB50D95DB0608D999214FEB6D6E60FAF2323275162E023C09FB3FE3A04",
    }
]
"""
